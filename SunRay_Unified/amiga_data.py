# amiga_data.py
"""
–î–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–æ–¥–æ–º Amiga
"""

import json
import logging
import os
import aiohttp
import ssl
import certifi
import re
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—Ç–æ—Ä —Å –∏—Ö ID
CATEGORIES = {
    "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã": "rulon.json",
    "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ó–µ–±—Ä–∞": "zebra.json", 
    "–®—Ç–æ—Ä—ã –ø–ª–∏—Å—Å–µ": "plisse.json",
    # "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ": "gofre.json",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ": "horizontal_aluminum.json",
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ": "horizontal_wood.json",
    "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": "vertical.json",
    # "–ë—Ä–∏–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": "breeze_vertical.json",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    # "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ú–∏—Ä–∞–∂": "mirage.json",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    "–ü–æ—Ä—Ç—å–µ—Ä—ã –∏ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã": "curtains_roman.json"
}

# ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è API
CATEGORY_IDS = {
    "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã": 1,
    "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ó–µ–±—Ä–∞": 6,
    "–®—Ç–æ—Ä—ã –ø–ª–∏—Å—Å–µ": 15,
    # "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ": 19,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ": 28,
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ": 38,
    "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": 43,
    # "–ë—Ä–∏–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": 47,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    # "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ú–∏—Ä–∞–∂": 11,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    "–ü–æ—Ä—Ç—å–µ—Ä—ã –∏ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã": 360
}

# ID –º–æ–¥–µ–ª–µ–π –ø–ª–∏—Å—Å–µ –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
PLISSE_MODEL_IDS = {
    "MIDI": 56,
    "MAXI": 113,
    "MINI": 53,
    "RUS": 223
}

# ID –º–æ–¥–µ–ª–µ–π –≥–æ—Ñ—Ä–µ –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
GOFRE_MODEL_IDS = {
    "MIDI": 86,
    "MAXI": 230,
    "RUS": 224
}

def normalize_material_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if not name:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    normalized = name.lower().strip()
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ "–∑–µ–±—Ä–∞" –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    if normalized.startswith("–∑–µ–±—Ä–∞ "):
        normalized = normalized[6:]
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ "–ø–æ–ª–æ—Å–∞" –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ
    if normalized.startswith("–ø–æ–ª–æ—Å–∞ "):
        normalized = normalized[7:]
    
    return normalized

def get_availability_status(availability: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∫–æ–¥—É"""
    status_map = {
        2: "üü¢ –í –Ω–∞–ª–∏—á–∏–∏",
        1: "üü° –ú–∞–ª–æ",
        0: "üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
    }
    return status_map.get(availability, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def make_absolute_url(image_url: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π"""
    if not image_url:
        return None
    
    if image_url.startswith('http'):
        return image_url
    
    # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
    if image_url.startswith('/'):
        image_url = image_url[1:]
    
    return f"https://customizer.amigo.ru/{image_url}"

def load_json_data(filename: str) -> Optional[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = os.path.dirname(os.path.abspath(__file__))
        filepath = os.path.join(script_dir, "amiga_data", filename)
        if not os.path.exists(filepath):
            logger.warning(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        with open(filepath, 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return None

def load_plisse_data(model: str) -> Optional[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∏—Å—Å–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = os.path.dirname(os.path.abspath(__file__))
        filepath = os.path.join(script_dir, "amiga_data", "plisse", f"{model}.json")
        if not os.path.exists(filepath):
            logger.warning(f"–§–∞–π–ª –ø–ª–∏—Å—Å–µ {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        with open(filepath, 'r', encoding='utf-8') as file:
            data = json.load(file)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∏—Å—Å–µ {model}: {e}")
        return None

def load_gofre_data(model: str) -> Optional[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–æ—Ñ—Ä–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = os.path.dirname(os.path.abspath(__file__))
        filepath = os.path.join(script_dir, "amiga_data", "gofre", f"{model}.json")
        if not os.path.exists(filepath):
            logger.warning(f"–§–∞–π–ª –≥–æ—Ñ—Ä–µ {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        with open(filepath, 'r', encoding='utf-8') as file:
            data = json.load(file)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ñ—Ä–µ {model}: {e}")
        return None

def get_all_plisse_models() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–ª–∏—Å—Å–µ"""
    return ["MIDI", "MAXI", "MINI", "RUS"]

def get_all_gofre_models() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≥–æ—Ñ—Ä–µ"""
    return ["MIDI", "MAXI", "RUS"]

async def make_api_request(category: str, fabric: str, variant: str, model_id: int = None) -> Optional[Dict]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç API –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É Amiga"""
    logger.info(f"API –∑–∞–ø—Ä–æ—Å: category={category}, fabric={fabric}, variant={variant}")
    
    try:
        if model_id is None:
            model_id = CATEGORY_IDS.get(category, 1)
        
        url = f"https://customizer.amigo.ru/api/models/{model_id}/materials"
        logger.info(f"API URL: {url} (model_id={model_id})")

        ssl_context = ssl.create_default_context(cafile=certifi.where())
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=ssl_context)) as session:
            async with session.get(
                url,
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(data)}")
                    
                    if not data:
                        logger.warning(f"API –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π! URL: {url}")
                        return None

                    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    search_name = f"{fabric} {variant}".strip().lower()
                    search_name_norm = normalize_material_name(search_name)
                    logger.info(f"–ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {search_name}")

                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    result = next(
                        (item for item in data if normalize_material_name(item.get("material", {}).get("name", "")) == search_name_norm),
                        None
                    )

                    if result:
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {result['material']['name']}")
                        return result
                    else:
                        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É
                        variant_norm = normalize_material_name(variant)
                        fabric_norm = normalize_material_name(fabric)
                        
                        partial = next(
                            (item for item in data if variant_norm in normalize_material_name(item.get("material", {}).get("name", ""))),
                            None
                        )
                        
                        if not partial:
                            # –ü—Ä–æ–±—É–µ–º –ø–æ —Ç–∫–∞–Ω–∏
                            partial = next(
                                (item for item in data if fabric_norm in normalize_material_name(item.get("material", {}).get("name", ""))),
                                None
                            )
                        
                        if partial:
                            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {partial['material']['name']}")
                            return partial
                        
                        logger.warning("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API")
                        return None
                else:
                    logger.error(f"API –æ—à–∏–±–∫–∞: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None
