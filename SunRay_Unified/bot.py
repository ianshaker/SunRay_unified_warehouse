import asyncio
import json
import logging
import os
import aiohttp
import ssl
import certifi
import re
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from urllib.parse import urlencode
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "https://customizer.amigo.ru")

if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_bot_token_here' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    print("3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
    exit(1)

if BOT_TOKEN == "your_bot_token_here":
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env")
    print("3. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_bot_token_here' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
    print("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
    exit(1)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class MainStates(StatesGroup):
    welcome_screen = State()
    choosing_factory = State()

class AmigaStates(StatesGroup):
    choosing_category = State()
    choosing_gofre_model = State()
    choosing_letter = State()
    choosing_fabric = State()
    choosing_variant = State()
    final_selection = State()

class CortinStates(StatesGroup):
    choosing_letter = State()
    choosing_fabric_type = State()
    choosing_fabric = State()
    final_selection = State()

class InterStates(StatesGroup):
    choosing_fabric_type = State()
    choosing_letter = State()
    choosing_fabric_name = State()
    choosing_color = State()
    final_selection = State()

try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 10

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–∏–¥–µ–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
seen_users = set()

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Amigo
from amiga_data import CATEGORIES, CATEGORY_IDS, PLISSE_MODEL_IDS

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Cortin
from cortin_data import SHUTTERS, MATERIALS

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Inter
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
import inter_data

def create_welcome_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    keyboard = [
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_bot")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_factory_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∑–∞–≤–æ–¥–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üè≠ Amigo", callback_data="factory_amiga")],
        [InlineKeyboardButton(text="üè≠ Cortin", callback_data="factory_cortin")],
        [InlineKeyboardButton(text="üè≠ Inter", callback_data="factory_inter")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_cortin_fabric_types_keyboard(fabric_types: List[str]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Ç–∫–∞–Ω–µ–π Cortin –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤—ã"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ —Ç–∫–∞–Ω–µ–π
    for i, fabric_type in enumerate(fabric_types):
        keyboard.append([InlineKeyboardButton(
            text=fabric_type,
            callback_data=f"cortin_fabric_type_{i}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –±—É–∫–≤—ã", callback_data="cortin_back_to_letters"),
    ])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_cortin_fabric_by_type_keyboard(fabrics: List[Dict], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ Cortin –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabrics[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        fabric_name = fabric.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        keyboard.append([InlineKeyboardButton(
            text=fabric_name,
            callback_data=f"cortin_fabric_final_{fabric.get('id', 0)}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    total_pages = (len(fabrics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"cortin_fabric_type_page_{page - 1}"
        ))
    
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"cortin_fabric_type_page_{page + 1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç–∫–∞–Ω–∏", callback_data="cortin_back_to_fabric_types"),
    ])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —à—Ç–æ—Ä Amigo"""
    keyboard = []
    categories_list = list(CATEGORIES.keys())
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(categories_list), 2):
        row = []
        for j in range(i, min(i + 2, len(categories_list))):
            category = categories_list[j]
            # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
            short_name = get_short_category_name(category)
            row.append(InlineKeyboardButton(
                text=short_name,
                callback_data=f"amiga_cat_{j}"
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞",
        callback_data="back_to_factory"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_short_category_name(category: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
    short_names = {
        "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã": "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã",
        "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ó–µ–±—Ä–∞": "–ó–µ–±—Ä–∞",
        "–®—Ç–æ—Ä—ã –ø–ª–∏—Å—Å–µ": "–ü–ª–∏—Å—Å–µ", 
        # "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ": "–ì–æ—Ñ—Ä–µ",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–µ": "–ì–æ—Ä–∏–∑. –∞–ª—é–º–∏–Ω.",
        "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ": "–ì–æ—Ä–∏–∑. –¥–µ—Ä–µ–≤—è–Ω.",
        "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ",
        # "–ë—Ä–∏–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ": "–ë—Ä–∏–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        # "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã –ú–∏—Ä–∞–∂": "–ú–∏—Ä–∞–∂",  # –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        "–ü–æ—Ä—Ç—å–µ—Ä—ã –∏ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã": "–ü–æ—Ä—Ç—å–µ—Ä—ã/—Ä–∏–º—Å–∫–∏–µ"
    }
    return short_names.get(category, category)

def create_fabric_keyboard(fabrics: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabrics[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric,
            callback_data=f"amiga_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"amiga_fabric_page_{page-1}"
        ))
    
    if end_idx < len(fabrics):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ", 
            callback_data=f"amiga_fabric_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        callback_data="amiga_back_to_categories"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_variants_keyboard(variants: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–ª–æ—Ç–Ω–∞ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_variants = variants[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    for i, variant in enumerate(page_variants):
        variant_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=variant,
            callback_data=f"amiga_variant_{variant_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"amiga_variant_page_{page-1}"
        ))
    
    if end_idx < len(variants):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"amiga_variant_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–ª–æ—Ç–Ω–∞–º
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–ª–æ—Ç–Ω–∞",
        callback_data="amiga_back_to_fabrics"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_final_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Amigo"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞", callback_data="amiga_back_to_variants")],
        [InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_gofre_model_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –≥–æ—Ñ—Ä–µ"""
    keyboard = [
        [InlineKeyboardButton(text="MAXI", callback_data="gofre_model_MAXI")],
        [InlineKeyboardButton(text="MIDI", callback_data="gofre_model_MIDI")],
        [InlineKeyboardButton(text="RUS", callback_data="gofre_model_RUS")],
        [InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="amiga_back_to_categories")],
        [InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_gofre_fabric_keyboard(fabrics: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ –≥–æ—Ñ—Ä–µ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabrics[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric,
            callback_data=f"amiga_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"amiga_fabric_page_{page-1}"
        ))
    
    if end_idx < len(fabrics):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ", 
            callback_data=f"amiga_fabric_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –≥–æ—Ñ—Ä–µ
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏",
        callback_data="amiga_back_to_gofre_models"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Cortin
def create_cortin_letters_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –¥–ª—è Cortin"""
    from cortin_data import get_fabric_letters
    letters = get_fabric_letters()
    
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—É–∫–≤—ã –ø–æ 5 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for i in range(0, len(letters), 5):
        row = []
        for j in range(i, min(i + 5, len(letters))):
            letter = letters[j]
            row.append(InlineKeyboardButton(
                text=letter,
                callback_data=f"cortin_letter_{letter}"
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞",
        callback_data="back_to_factory"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_cortin_fabric_by_letter_keyboard(fabrics: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ Cortin –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –±—É–∫–≤—É (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabrics[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric,
            callback_data=f"cortin_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    total_pages = (len(fabrics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"cortin_fabric_page_{page - 1}"
        ))
    
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"cortin_fabric_page_{page + 1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –±—É–∫–≤—ã", callback_data="cortin_back_to_letters"),
    ])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_cortin_final_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Cortin"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–ª–æ—Ç–Ω–∞", callback_data="cortin_back_to_fabric_types")],
        [InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_cortin_shutter_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —à—Ç–æ—Ä Cortin (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    from cortin_data import get_shutter_categories
    categories = get_shutter_categories()
    
    keyboard = []
    for i, category in enumerate(categories):
        keyboard.append([InlineKeyboardButton(
            text=category,
            callback_data=f"cortin_shutter_cat_{i}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞",
        callback_data="back_to_factory"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Inter
def create_inter_fabric_types_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —à—Ç–æ—Ä Inter"""
    fabric_types = inter_data.get_fabric_types()
    
    keyboard = []
    for i, fabric_type in enumerate(fabric_types):
        display_name = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
        keyboard.append([InlineKeyboardButton(
            text=display_name,
            callback_data=f"inter_type_{i}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞",
        callback_data="back_to_factory"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_inter_fabric_categories_keyboard(fabric_type: str, page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–æ—Ç–µ–Ω Inter (–≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ —ç—Ç–æ –ø–æ–ª–æ—Ç–Ω–∞, –∞ –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    fabric_groups = inter_data.get_fabric_groups(fabric_type)
    fabric_names = list(fabric_groups.keys())
    
    keyboard = []
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabric_names[start_idx:end_idx]
    
    for i, fabric_name in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric_name,
            callback_data=f"inter_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"inter_fabric_page_{page-1}"
        ))
    
    if end_idx < len(fabric_names):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"inter_fabric_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∏–ø–∞–º —à—Ç–æ—Ä
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —à—Ç–æ—Ä—ã",
        callback_data="inter_back_to_types"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_inter_fabric_names_keyboard(fabric_type: str, fabric_category: str, page: int = 0):
    """–£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è create_inter_fabric_categories_keyboard"""
    return create_inter_fabric_categories_keyboard(fabric_type, page)

def create_inter_colors_keyboard(fabric_type: str, fabric_category: str, fabric_name: str, page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–∞–º–∏ —Ç–∫–∞–Ω–µ–π Inter"""
    colors_data = inter_data.get_fabric_colors(fabric_type, fabric_category, fabric_name)
    
    keyboard = []
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_colors = colors_data[start_idx:end_idx]
    
    for i, item in enumerate(page_colors):
        color = inter_data.extract_color_from_name(item.get('name', ''))
        color_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=color,
            callback_data=f"inter_color_{color_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"inter_color_page_{page-1}"
        ))
    
    if end_idx < len(colors_data):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"inter_color_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–ª–æ—Ç–Ω–∞–º
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–ª–æ—Ç–Ω–∞",
        callback_data="inter_back_to_fabrics"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_inter_final_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Inter"""
    keyboard = [
        [InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–ª–æ—Ç–Ω–∞", callback_data="inter_back_to_colors")],
        [InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º –≤ Inter
def get_inter_fabric_letters(fabric_names: List[str]) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ –ø–æ–ª–æ—Ç–µ–Ω Inter"""
    letters = set()
    for fabric in fabric_names:
        if fabric:
            first_letter = fabric[0].upper()
            letters.add(first_letter)
    return sorted(list(letters))

def filter_inter_fabrics_by_letter(fabric_names: List[str], letter: str) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª–æ—Ç–Ω–∞ Inter –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ"""
    return [fabric for fabric in fabric_names if fabric and fabric[0].upper() == letter.upper()]

def create_inter_letters_keyboard(letters: List[str]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –¥–ª—è Inter"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—É–∫–≤—ã –ø–æ 5 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for i in range(0, len(letters), 5):
        row = []
        for j in range(i, min(i + 5, len(letters))):
            letter = letters[j]
            row.append(InlineKeyboardButton(
                text=letter,
                callback_data=f"inter_letter_{letter}"
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∏–ø–∞–º —à—Ç–æ—Ä
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —à—Ç–æ—Ä—ã",
        callback_data="inter_back_to_types"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_inter_fabric_by_letter_keyboard(fabric_names: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ Inter –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –±—É–∫–≤—É (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabric_names[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric_name in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric_name,
            callback_data=f"inter_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"inter_fabric_page_{page-1}"
        ))
    
    if end_idx < len(fabric_names):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ", 
            callback_data=f"inter_fabric_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –±—É–∫–≤—ã",
        callback_data="inter_back_to_letters"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ Amigo
def get_fabric_letters(fabrics: List[str]) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤ –ø–æ–ª–æ—Ç–µ–Ω"""
    letters = set()
    for fabric in fabrics:
        if fabric:
            first_letter = fabric[0].upper()
            letters.add(first_letter)
    return sorted(list(letters))

def filter_amiga_fabrics_by_letter(fabrics: List[str], letter: str) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª–æ—Ç–Ω–∞ Amigo –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ"""
    return [fabric for fabric in fabrics if fabric and fabric[0].upper() == letter.upper()]



def create_letters_keyboard(letters: List[str]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—É–∫–≤—ã –ø–æ 5 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for i in range(0, len(letters), 5):
        row = []
        for j in range(i, min(i + 5, len(letters))):
            letter = letters[j]
            row.append(InlineKeyboardButton(
                text=letter,
                callback_data=f"letter_{letter}"
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        callback_data="amiga_back_to_categories"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_fabric_by_letter_keyboard(fabrics: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –±—É–∫–≤—É (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabrics[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric,
            callback_data=f"amiga_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"amiga_fabric_page_{page-1}"
        ))
    
    if end_idx < len(fabrics):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ", 
            callback_data=f"amiga_fabric_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –±—É–∫–≤—ã",
        callback_data="amiga_back_to_letters"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_gofre_letters_keyboard(letters: List[str]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –¥–ª—è –≥–æ—Ñ—Ä–µ"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±—É–∫–≤—ã –ø–æ 5 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for i in range(0, len(letters), 5):
        row = []
        for j in range(i, min(i + 5, len(letters))):
            letter = letters[j]
            row.append(InlineKeyboardButton(
                text=letter,
                callback_data=f"gofre_letter_{letter}"
            ))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏ –≥–æ—Ñ—Ä–µ
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏",
        callback_data="amiga_back_to_gofre_models"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_gofre_fabric_by_letter_keyboard(fabrics: List[str], page: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–æ—Ç–Ω–∞–º–∏ –≥–æ—Ñ—Ä–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –±—É–∫–≤—É (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    keyboard = []
    
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_fabrics = fabrics[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω
    for i, fabric in enumerate(page_fabrics):
        fabric_idx = start_idx + i
        keyboard.append([InlineKeyboardButton(
            text=fabric,
            callback_data=f"amiga_fabric_{fabric_idx}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"amiga_fabric_page_{page-1}"
        ))
    
    if end_idx < len(fabrics):
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –î–∞–ª–µ–µ", 
            callback_data=f"amiga_fabric_page_{page+1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤ –≥–æ—Ñ—Ä–µ
    keyboard.append([InlineKeyboardButton(
        text="üîô –ö –≤—ã–±–æ—Ä—É –±—É–∫–≤—ã",
        callback_data="amiga_back_to_gofre_letters"
    )])
    keyboard.append([InlineKeyboardButton(text="üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="reset_bot")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    await state.set_state(MainStates.welcome_screen)
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –ø–æ–¥–±–æ—Ä—É —Ç–∫–∞–Ω–µ–π –æ—Ç Amigo, Cortin –∏ Inter.\n\n"
        "üì¶ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–∫–∞–Ω–∏, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n\n"
        "üîç –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –∑–∞–≤–æ–¥ –∏ –∑–∞–ø—É—Å–∫–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
        "–ù–∞–∂–º–∏ \"üöÄ –ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å."
    )
    
    await message.answer(text=welcome_text, reply_markup=create_welcome_keyboard())

@dp.callback_query(F.data == "start_bot")
async def start_bot_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üöÄ –ù–∞—á–∞—Ç—å' - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∑–∞–≤–æ–¥–∞"""
    await state.set_state(MainStates.choosing_factory)
    
    factory_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–æ–¥:"
    
    try:
        await callback.message.edit_text(
            text=factory_text,
            reply_markup=create_factory_keyboard()
        )
    except:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=factory_text,
            reply_markup=create_factory_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("factory_"))
async def process_factory_selection(callback: CallbackQuery, state: FSMContext):
    factory = callback.data.split("_")[1]
    
    if factory == "amiga":
        await state.update_data(factory="amiga")
        await state.set_state(AmigaStates.choosing_category)
        await callback.message.edit_text(
            text="–°–∫–ª–∞–¥: Amigo\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_categories_keyboard()
        )
    elif factory == "cortin":
        await state.update_data(factory="cortin")
        await state.set_state(CortinStates.choosing_letter)
        await callback.message.edit_text(
            text="–°–∫–ª–∞–¥: Cortin\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_cortin_letters_keyboard()
        )
    elif factory == "inter":
        await state.update_data(factory="inter")
        await state.set_state(InterStates.choosing_fabric_type)
        await callback.message.edit_text(
            text="–°–∫–ª–∞–¥: Inter\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_inter_fabric_types_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data == "reset_bot")
async def reset_bot_state(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É' - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await state.clear()
    await state.set_state(MainStates.welcome_screen)
    
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –ø–æ–¥–±–æ—Ä—É —Ç–∫–∞–Ω–µ–π –æ—Ç Amigo, Cortin –∏ Inter.\n\n"
        "üì¶ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–∫–∞–Ω–∏, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–¥–µ–ª–∏–π.\n\n"
        "üîç –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –∑–∞–≤–æ–¥ –∏ –∑–∞–ø—É—Å–∫–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
        "–ù–∞–∂–º–∏ \"üöÄ –ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å."
    )
    
    try:
        await callback.message.edit_text(
            text=welcome_text,
            reply_markup=create_welcome_keyboard()
        )
    except:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=welcome_text,
            reply_markup=create_welcome_keyboard()
        )
    
    await callback.answer("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@dp.callback_query(F.data == "back_to_factory")
async def back_to_factory(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(MainStates.choosing_factory)
    try:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
            reply_markup=create_factory_keyboard()
        )
    except:
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
            reply_markup=create_factory_keyboard()
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Amigo
@dp.callback_query(F.data.startswith("amiga_cat_"))
async def process_amiga_category_selection(callback: CallbackQuery, state: FSMContext):
    try:
        category_idx = int(callback.data.split("_")[2])
        categories_list = list(CATEGORIES.keys())
        
        if category_idx >= len(categories_list):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
            
        selected_category = categories_list[category_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {selected_category}")
        
        json_filename = CATEGORIES[selected_category]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        from amiga_data import load_json_data, load_plisse_data, load_gofre_data, get_all_plisse_models, get_all_gofre_models
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–ª–∏—Å—Å–µ –∏ –≥–æ—Ñ—Ä–µ
        if selected_category == "–®—Ç–æ—Ä—ã –ø–ª–∏—Å—Å–µ":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–ª–∏—Å—Å–µ
            models = get_all_plisse_models()
            category_data = {}
            fabric_to_model = {}  # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–æ—Ç–Ω–∞ –∫ –º–æ–¥–µ–ª–∏
            for model in models:
                model_data = load_plisse_data(model)
                if model_data and model in model_data:
                    for fabric_name in model_data[model].keys():
                        category_data[fabric_name] = model_data[model][fabric_name]
                        fabric_to_model[fabric_name] = model
        # elif selected_category == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ":
        #     # –î–ª—è –≥–æ—Ñ—Ä–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        #     await state.update_data(
        #         category=selected_category,
        #         json_filename=json_filename
        #     )
        #     await state.set_state(AmigaStates.choosing_gofre_model)
        #     
        #     keyboard = create_gofre_model_keyboard()
        #     text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
        #     await callback.message.edit_text(text=text, reply_markup=keyboard)
        #     await callback.answer()
        #     return
        else:
            # –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            fabric_to_model = {}
            json_data = load_json_data(json_filename)
            if not json_data:
                await callback.message.edit_text(
                    f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_category}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                    reply_markup=create_categories_keyboard()
                )
                return
            
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ { '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': {...} }, –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–ª–æ–≤–∞—Ä—å
            category_data = json_data
            if selected_category in json_data:
                category_data = json_data[selected_category]
        
        if not category_data:
            await callback.message.edit_text(
                f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{selected_category}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                reply_markup=create_categories_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            category=selected_category,
            json_filename=json_filename,
            category_data=category_data,
            fabric_to_model=fabric_to_model,  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–æ—Ç–Ω–∞ –∫ –º–æ–¥–µ–ª–∏
            fabric_page=0
        )
        await state.set_state(AmigaStates.choosing_letter)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞
        fabrics = list(category_data.keys())
        letters = get_fabric_letters(fabrics)
        keyboard = create_letters_keyboard(letters)
        text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:"
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# @dp.callback_query(F.data.startswith("gofre_model_"))
# async def process_gofre_model_selection(callback: CallbackQuery, state: FSMContext):
#     try:
#         model = callback.data.split("_")[2]  # MAXI, MIDI, –∏–ª–∏ RUS
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å –≥–æ—Ñ—Ä–µ: {model}")
#         
#         data = await state.get_data()
#         selected_category = data['category']
#         
#         # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
#         from amiga_data import load_gofre_data
#         model_data = load_gofre_data(model)
#         
#         if not model_data or model not in model_data:
#             await callback.message.edit_text(
#                 f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ '{model}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
#                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
#                 reply_markup=create_gofre_model_keyboard()
#             )
#             await callback.answer()
#             return
#         
#         category_data = model_data[model]
#         fabric_to_model = {fabric_name: model for fabric_name in category_data.keys()}
#         
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#         await state.update_data(
#             gofre_model=model,
#             category_data=category_data,
#             fabric_to_model=fabric_to_model,
#             fabric_page=0
#         )
#         await state.set_state(AmigaStates.choosing_letter)
#         
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
#         fabrics = list(category_data.keys())
#         letters = get_fabric_letters(fabrics)
#         keyboard = create_gofre_letters_keyboard(letters)
#         text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–ú–æ–¥–µ–ª—å: {model}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:"
#         await callback.message.edit_text(text=text, reply_markup=keyboard)
#         await callback.answer()
#         
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ñ—Ä–µ: {e}")
#         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("letter_"))
async def process_letter_selection(callback: CallbackQuery, state: FSMContext):
    try:
        letter = callback.data.split("_")[1]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—É–∫–≤—É: {letter}")
        
        data = await state.get_data()
        category_data = data['category_data']
        selected_category = data['category']
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤–µ
        all_fabrics = list(category_data.keys())
        filtered_fabrics = filter_amiga_fabrics_by_letter(all_fabrics, letter)
        
        if not filtered_fabrics:
            await callback.answer(f"–ù–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω –Ω–∞ –±—É–∫–≤—É '{letter}'")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
        await state.update_data(
            selected_letter=letter,
            filtered_fabrics=filtered_fabrics,
            fabric_page=0
        )
        await state.set_state(AmigaStates.choosing_fabric)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
        keyboard = create_fabric_by_letter_keyboard(filtered_fabrics, 0)
        text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–ë—É–∫–≤–∞: {letter}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:"
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–≤—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# @dp.callback_query(F.data.startswith("gofre_letter_"))
# async def process_gofre_letter_selection(callback: CallbackQuery, state: FSMContext):
#     try:
#         letter = callback.data.split("_")[2]
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—É–∫–≤—É –¥–ª—è –≥–æ—Ñ—Ä–µ: {letter}")
#         
#         data = await state.get_data()
#         category_data = data['category_data']
#         selected_category = data['category']
#         gofre_model = data['gofre_model']
#         
#         # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤–µ
#         all_fabrics = list(category_data.keys())
#         filtered_fabrics = filter_amiga_fabrics_by_letter(all_fabrics, letter)
#         
#         if not filtered_fabrics:
#             await callback.answer(f"–ù–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω –Ω–∞ –±—É–∫–≤—É '{letter}'")
#             return
#         
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
#         await state.update_data(
#             selected_letter=letter,
#             filtered_fabrics=filtered_fabrics,
#             fabric_page=0
#         )
#         await state.set_state(AmigaStates.choosing_fabric)
#         
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
#         keyboard = create_gofre_fabric_by_letter_keyboard(filtered_fabrics, 0)
#         text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n–ú–æ–¥–µ–ª—å: {gofre_model}\n–ë—É–∫–≤–∞: {letter}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:"
#         await callback.message.edit_text(text=text, reply_markup=keyboard)
#         await callback.answer()
#         
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–≤—ã –¥–ª—è –≥–æ—Ñ—Ä–µ: {e}")
#         await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("amiga_fabric_"))
async def process_amiga_fabric_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        
        if 'category_data' not in data:
            await callback.message.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.",
                reply_markup=create_categories_keyboard()
            )
            await state.set_state(AmigaStates.choosing_category)
            await callback.answer()
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞
        if 'filtered_fabrics' in data:
            fabrics = data['filtered_fabrics']
        else:
            fabrics = list(data['category_data'].keys())
        
        if callback.data.startswith("amiga_fabric_page_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page = int(callback.data.split("_")[3])
            await state.update_data(fabric_page=page)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if 'filtered_fabrics' in data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω
                # if data.get('category') == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ" and 'gofre_model' in data:
                #     keyboard = create_gofre_fabric_by_letter_keyboard(fabrics, page)
                # else:
                keyboard = create_fabric_by_letter_keyboard(fabrics, page)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                # if data.get('category') == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ" and 'gofre_model' in data:
                #     keyboard = create_gofre_fabric_keyboard(fabrics, page)
                # else:
                keyboard = create_fabric_keyboard(fabrics, page)
            
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ—Ç–Ω–∞
        fabric_idx = int(callback.data.split("_")[2])
        
        if fabric_idx >= len(fabrics):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ—Ç–Ω–∞")
            return
            
        selected_fabric = fabrics[fabric_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–æ—Ç–Ω–æ: {selected_fabric}")
        variants = data['category_data'][selected_fabric]
        
        if not variants:
            await callback.message.edit_text(
                "‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–æ—Ç–Ω–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –ø–æ–ª–æ—Ç–Ω–æ.",
                reply_markup=create_fabric_keyboard(fabrics, data.get('fabric_page', 0))
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            fabric=selected_fabric,
            variants=variants,
            variant_page=0
        )
        await state.set_state(AmigaStates.choosing_variant)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        keyboard = create_variants_keyboard(variants, 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–æ—Ñ—Ä–µ
        # if data.get('category') == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ" and 'gofre_model' in data:
        #     text = (f"–°–∫–ª–∞–¥: Amigo\n\n"
        #             f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        #             f"–ú–æ–¥–µ–ª—å: {data['gofre_model']}\n"
        #             f"–ü–æ–ª–æ—Ç–Ω–æ: {selected_fabric}\n"
        #             f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
        # else:
        text = (f"–°–∫–ª–∞–¥: Amigo\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"–ü–æ–ª–æ—Ç–Ω–æ: {selected_fabric}\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
        
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–æ—Ç–Ω–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("amiga_variant_"))
async def process_amiga_variant_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        category = data['category']
        
        if 'variants' not in data or not data['variants']:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–æ—Ç–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –ø–æ–ª–æ—Ç–Ω–æ.",
                reply_markup=create_fabric_keyboard(
                    list(data.get('category_data', {}).keys()), 
                    data.get('fabric_page', 0)
                )
            )
            await state.set_state(AmigaStates.choosing_fabric)
            await callback.answer()
            return
            
        variants = data['variants']
        
        if callback.data.startswith("amiga_variant_page_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page = int(callback.data.split("_")[3])
            await state.update_data(variant_page=page)
            keyboard = create_variants_keyboard(variants, page)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        variant_idx = int(callback.data.split("_")[2])
        
        if variant_idx >= len(variants):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            return
            
        selected_variant = variants[variant_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç: {selected_variant}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(variant=selected_variant)
        await state.set_state(AmigaStates.final_selection)
        
        await callback.message.edit_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        fabric_name = data['fabric']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º model_id –¥–ª—è –ø–ª–∏—Å—Å–µ –∏ –≥–æ—Ñ—Ä–µ
        model_id = None
        if category in ["–®—Ç–æ—Ä—ã –ø–ª–∏—Å—Å–µ"]:  # –£–±—Ä–∞–ª–∏ "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ"
            fabric_to_model = data.get('fabric_to_model', {})
            model_name = fabric_to_model.get(fabric_name)
            if model_name:
                if category == "–®—Ç–æ—Ä—ã –ø–ª–∏—Å—Å–µ":
                    from amiga_data import PLISSE_MODEL_IDS
                    model_id = PLISSE_MODEL_IDS.get(model_name)
                # elif category == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ":
                #     from amiga_data import GOFRE_MODEL_IDS
                #     model_id = GOFRE_MODEL_IDS.get(model_name)
                logger.info(f"–î–ª—è {category} {fabric_name} –∏—Å–ø–æ–ª—å–∑—É–µ–º model_id={model_id} (–º–æ–¥–µ–ª—å {model_name})")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å
        from amiga_data import make_api_request, get_availability_status, make_absolute_url
        api_response = await make_api_request(
            category,
            fabric_name,
            selected_variant,
            model_id=model_id
        )
        
        if api_response:
            availability_code = api_response['material'].get('availability', 0)
            availability_status = get_availability_status(availability_code)
            image_url = make_absolute_url(api_response['material'].get('image'))
            material_name = api_response['material'].get('name', f"{fabric_name} {selected_variant}")
        else:
            availability_status = "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            availability_code = None
            image_url = None
            material_name = f"{fabric_name} {selected_variant}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        # if data.get('category') == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ" and 'gofre_model' in data:
        #     card_text = (
        #         f"–°–∫–ª–∞–¥: Amigo\n\n"
        #         f"–í–∞—à –≤—ã–±–æ—Ä:\n\n"
        #         f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
        #         f"–ú–æ–¥–µ–ª—å: {data['gofre_model']}\n"
        #         f"–ü–æ–ª–æ—Ç–Ω–æ: {data['fabric']}\n"
        #         f"–í–∞—Ä–∏–∞–Ω—Ç: {selected_variant}\n"
        #         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {material_name}\n\n"
        #         f"üì¶ –ù–∞–ª–∏—á–∏–µ: {availability_status}"
        #     )
        # else:
        card_text = (
            f"–°–∫–ª–∞–¥: Amigo\n\n"
            f"–í–∞—à –≤—ã–±–æ—Ä:\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–ü–æ–ª–æ—Ç–Ω–æ: {data['fabric']}\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç: {selected_variant}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {material_name}\n\n"
            f"üì¶ –ù–∞–ª–∏—á–∏–µ: {availability_status}"
        )
        
        keyboard = create_final_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if image_url:
            try:
                await callback.message.delete()
                await bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=image_url,
                    caption=card_text,
                    reply_markup=keyboard
                )
                await callback.answer()
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback.message.edit_text(text=card_text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(text=card_text, reply_markup=keyboard)
            
        await callback.answer()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–≤–∞—Ä: {data['category']} - {data['fabric']} - {selected_variant}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Cortin
@dp.callback_query(F.data.startswith("cortin_letter_"))
async def process_cortin_letter_selection(callback: CallbackQuery, state: FSMContext):
    try:
        letter = callback.data.split("_")[2]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—É–∫–≤—É –¥–ª—è Cortin: {letter}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —Ç–∫–∞–Ω–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤—ã
        from cortin_data import get_fabric_types_by_letter
        fabric_types = get_fabric_types_by_letter(letter)
        
        if not fabric_types:
            await callback.answer(f"–ù–µ—Ç —Ç–∏–ø–æ–≤ —Ç–∫–∞–Ω–µ–π –Ω–∞ –±—É–∫–≤—É '{letter}'")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
        await state.update_data(selected_letter=letter, fabric_types=fabric_types)
        await state.set_state(CortinStates.choosing_fabric_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ç–∫–∞–Ω–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
        keyboard = create_cortin_fabric_types_keyboard(fabric_types)
        text = f"–°–∫–ª–∞–¥: Cortin\n\n–ë—É–∫–≤–∞: {letter}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∫–∞–Ω–∏:"
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–≤—ã –¥–ª—è Cortin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("cortin_fabric_type_page_"))
async def process_cortin_fabric_type_page(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[4])
        data = await state.get_data()
        fabrics = data.get('fabrics', [])
        selected_fabric_type = data.get('selected_fabric_type', '')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await state.update_data(fabric_page=page)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        keyboard = create_cortin_fabric_by_type_keyboard(fabrics, page)
        text = f"–°–∫–ª–∞–¥: Cortin\n\n–ë—É–∫–≤–∞: {data.get('selected_letter', '')}\n–¢–∏–ø —Ç–∫–∞–Ω–∏: {selected_fabric_type}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:"
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º Cortin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("cortin_fabric_type_") & ~F.data.contains("page"))
async def process_cortin_fabric_type_selection(callback: CallbackQuery, state: FSMContext):
    try:
        fabric_type_idx = int(callback.data.split("_")[3])
        data = await state.get_data()
        fabric_types = data.get('fabric_types', [])
        
        if fabric_type_idx >= len(fabric_types):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–∫–∞–Ω–∏")
            return
            
        selected_fabric_type = fabric_types[fabric_type_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø —Ç–∫–∞–Ω–∏ Cortin: {selected_fabric_type}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        from cortin_data import get_fabrics_by_type
        fabrics = get_fabrics_by_type(selected_fabric_type)
        
        if not fabrics:
            await callback.answer(f"–ù–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω —Ç–∏–ø–∞ '{selected_fabric_type}'")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–∫–∞–Ω–∏ –∏ –ø–æ–ª–æ—Ç–Ω–∞
        await state.update_data(
            selected_fabric_type=selected_fabric_type,
            fabrics=fabrics,
            fabric_page=0
        )
        await state.set_state(CortinStates.choosing_fabric)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        keyboard = create_cortin_fabric_by_type_keyboard(fabrics, 0)
        text = f"–°–∫–ª–∞–¥: Cortin\n\n–ë—É–∫–≤–∞: {data.get('selected_letter', '')}\n–¢–∏–ø —Ç–∫–∞–Ω–∏: {selected_fabric_type}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:"
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —Ç–∫–∞–Ω–∏ –¥–ª—è Cortin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("cortin_fabric_") & ~F.data.contains("page") & ~F.data.contains("final") & ~F.data.contains("type"))
async def process_cortin_fabric_selection(callback: CallbackQuery, state: FSMContext):
    try:
        fabric_idx = int(callback.data.split("_")[2])
        data = await state.get_data()
        filtered_fabrics = data.get('filtered_fabrics', [])
        
        if fabric_idx >= len(filtered_fabrics):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ—Ç–Ω–∞")
            return
            
        selected_fabric = filtered_fabrics[fabric_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–æ—Ç–Ω–æ Cortin: {selected_fabric}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–æ—Ç–Ω–µ
        from cortin_data import find_fabric_by_name, get_fabric_stock_online
        fabric_info = find_fabric_by_name(selected_fabric)
        
        if not fabric_info:
            await callback.answer("–ü–æ–ª–æ—Ç–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await state.update_data(selected_fabric=fabric_info)
        await state.set_state(CortinStates.final_selection)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ª–∏—á–∏–∏
        try:
            stock_info = await get_fabric_stock_online(selected_fabric, "–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã", "–î–µ–Ω—å-–ù–æ—á—å")
            availability = stock_info.get('availability', '‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –¥–ª—è {selected_fabric}: {e}")
            availability = "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ\n\n"
        message_text += f"–°–∫–ª–∞–¥: Cortin\n"
        message_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–æ—Ç–Ω–∞: {selected_fabric}\n"
        message_text += f"üì¶ –ù–∞–ª–∏—á–∏–µ: {availability}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        image_url = fabric_info.get('image')
        if image_url and image_url.strip():
            try:
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=image_url,
                    caption=message_text,
                    reply_markup=create_cortin_final_keyboard()
                )
            except Exception as photo_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_url}: {photo_error}")
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    message_text + "\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=create_cortin_final_keyboard()
                )
        else:
            await callback.message.edit_text(
                message_text + "\nüì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                reply_markup=create_cortin_final_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–æ—Ç–Ω–∞ Cortin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("cortin_fabric_final_"))
async def process_cortin_fabric_final_selection(callback: CallbackQuery, state: FSMContext):
    try:
        fabric_id = int(callback.data.split("_")[3])
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–æ—Ç–Ω–æ Cortin —Å ID: {fabric_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–æ—Ç–Ω–µ –ø–æ ID
        from cortin_data import find_variant_by_id, get_fabric_stock_online
        fabric_info = find_variant_by_id(fabric_id)
        
        if not fabric_info:
            await callback.answer("–ü–æ–ª–æ—Ç–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        selected_fabric = fabric_info.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        await state.update_data(selected_fabric=fabric_info)
        await state.set_state(CortinStates.final_selection)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ª–∏—á–∏–∏
        try:
            stock_info = await get_fabric_stock_online(selected_fabric, "–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã", "–î–µ–Ω—å-–ù–æ—á—å")
            availability = stock_info.get('availability', '‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –¥–ª—è {selected_fabric}: {e}")
            availability = "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ\n\n"
        message_text += f"–°–∫–ª–∞–¥: Cortin\n"
        message_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–æ—Ç–Ω–∞: {selected_fabric}\n"
        message_text += f"üì¶ –ù–∞–ª–∏—á–∏–µ: {availability}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        image_url = fabric_info.get('image')
        if image_url:
            try:
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=image_url,
                    caption=message_text,
                    reply_markup=create_cortin_final_keyboard(),
                    parse_mode="Markdown"
                )
            except Exception as photo_error:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    message_text + "\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=create_cortin_final_keyboard(),
                    parse_mode="Markdown"
                )
        else:
            await callback.message.edit_text(
                message_text,
                reply_markup=create_cortin_final_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–æ—Ç–Ω–∞ Cortin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("cortin_fabric_page_"))
async def process_cortin_fabric_page(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[3])
        data = await state.get_data()
        fabrics = data.get('fabrics', [])
        selected_fabric_type = data.get('selected_fabric_type', '')
        
        await state.update_data(fabric_page=page)
        
        keyboard = create_cortin_fabric_by_type_keyboard(fabrics, page)
        text = f"–°–∫–ª–∞–¥: Cortin\n\n–ë—É–∫–≤–∞: {data.get('selected_letter', '')}\n–¢–∏–ø —Ç–∫–∞–Ω–∏: {selected_fabric_type}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:"
        await callback.message.edit_text(text=text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º Cortin: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è Amigo
@dp.callback_query(F.data == "amiga_back_to_categories")
async def amiga_back_to_categories(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AmigaStates.choosing_category)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–∫–≤ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω
    await state.update_data(filtered_fabrics=None, selected_letter=None)
    
    try:
        await callback.message.edit_text(
            text="–°–∫–ª–∞–¥: Amigo\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_categories_keyboard()
        )
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            text="–°–∫–ª–∞–¥: Amigo\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_categories_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data == "amiga_back_to_fabrics")
async def amiga_back_to_fabrics(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'category_data' in data:
        await state.set_state(AmigaStates.choosing_letter)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_data = data.get('category_data', {})
        fabrics = list(category_data.keys())
        letters = get_fabric_letters(fabrics)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≥–æ—Ñ—Ä–µ –∏–ª–∏ –Ω–µ—Ç
        # if data.get('category') == "–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ" and 'gofre_model' in data:
        #     keyboard = create_gofre_letters_keyboard(letters)
        #     text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n–ú–æ–¥–µ–ª—å: {data['gofre_model']}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:"
        # else:
        keyboard = create_letters_keyboard(letters)
        text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:"
        
        try:
            await callback.message.edit_text(text=text, reply_markup=keyboard)
        except:
            await callback.message.answer(text=text, reply_markup=keyboard)
    else:
        await amiga_back_to_categories(callback, state)
    await callback.answer()

# @dp.callback_query(F.data == "amiga_back_to_gofre_models")
# async def amiga_back_to_gofre_models(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     await state.set_state(AmigaStates.choosing_gofre_model)
#     
#     # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–∫–≤ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω
#     await state.update_data(filtered_fabrics=None, selected_letter=None)
#     
#     keyboard = create_gofre_model_keyboard()
#     text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–®—Ç–æ—Ä—ã –≥–æ—Ñ—Ä–µ')}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
#     
#     try:
#         await callback.message.edit_text(text=text, reply_markup=keyboard)
#     except:
#         await callback.message.answer(text=text, reply_markup=keyboard)
#     await callback.answer()

@dp.callback_query(F.data == "amiga_back_to_variants")
async def amiga_back_to_variants(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'variants' in data:
        await state.set_state(AmigaStates.choosing_variant)
        variants = data['variants']
        keyboard = create_variants_keyboard(variants, data.get('variant_page', 0))
        text = (f"–°–∫–ª–∞–¥: Amigo\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"–ü–æ–ª–æ—Ç–Ω–æ: {data['fabric']}\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:")
        try:
            await callback.message.edit_text(text=text, reply_markup=keyboard)
        except:
            await callback.message.answer(text=text, reply_markup=keyboard)
    else:
        await amiga_back_to_fabrics(callback, state)
    await callback.answer()

@dp.callback_query(F.data == "amiga_back_to_letters")
async def amiga_back_to_letters(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(AmigaStates.choosing_letter)
    
    # –û—á–∏—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
    await state.update_data(filtered_fabrics=None, selected_letter=None)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_data = data.get('category_data', {})
    fabrics = list(category_data.keys())
    letters = get_fabric_letters(fabrics)
    
    keyboard = create_letters_keyboard(letters)
    text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:"
    
    try:
        await callback.message.edit_text(text=text, reply_markup=keyboard)
    except:
        await callback.message.answer(text=text, reply_markup=keyboard)
    await callback.answer()

# @dp.callback_query(F.data == "amiga_back_to_gofre_letters")
# async def amiga_back_to_gofre_letters(callback: CallbackQuery, state: FSMContext):
#     data = await state.get_data()
#     await state.set_state(AmigaStates.choosing_letter)
#     
#     # –û—á–∏—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
#     await state.update_data(filtered_fabrics=None, selected_letter=None)
#     
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è –≥–æ—Ñ—Ä–µ –º–æ–¥–µ–ª–∏
#     category_data = data.get('category_data', {})
#     fabrics = list(category_data.keys())
#     letters = get_fabric_letters(fabrics)
#     
#     keyboard = create_gofre_letters_keyboard(letters)
#     text = f"–°–∫–ª–∞–¥: Amigo\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n–ú–æ–¥–µ–ª—å: {data.get('gofre_model')}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:"
#     
#     try:
#         await callback.message.edit_text(text=text, reply_markup=keyboard)
#     except:
#         await callback.message.answer(text=text, reply_markup=keyboard)
#     await callback.answer()

@dp.callback_query(F.data == "amiga_new_search")
async def amiga_new_search(callback: CallbackQuery, state: FSMContext):
    await state.update_data(factory="Amigo")
    await state.set_state(AmigaStates.choosing_category)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–∫–≤ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω
    await state.update_data(filtered_fabrics=None, selected_letter=None)
    
    await callback.message.edit_text(
        text="–°–∫–ª–∞–¥: Amigo\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
        reply_markup=create_categories_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Cortin
@dp.callback_query(F.data.startswith("cortin_shutter_page_"))
async def cortin_shutter_pagination(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[-1])
        data = await state.get_data()
        category = data.get('shutter_category', '')
        
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_cortin_shutters_keyboard(category, page)
        )
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
            reply_markup=create_cortin_shutter_categories_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data.startswith("cortin_fabric_cat_page_"))
async def cortin_fabric_category_pagination(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[-1])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∫–∞–Ω–∏:",
            reply_markup=create_cortin_fabric_categories_keyboard(page)
        )
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
            reply_markup=create_cortin_fabric_categories_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data.startswith("cortin_variant_page_"))
async def cortin_variant_pagination(callback: CallbackQuery, state: FSMContext):
    try:
        page = int(callback.data.split("_")[-1])
        data = await state.get_data()
        fabric_category = data.get('fabric_category', '')
        
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∫–∞–Ω–∏: {fabric_category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=create_cortin_fabric_variants_keyboard(fabric_category, page)
        )
    except Exception as e:
        data = await state.get_data()
        fabric_category = data.get('fabric_category', '')
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
            reply_markup=create_cortin_fabric_variants_keyboard(fabric_category)
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Cortin
@dp.callback_query(F.data == "cortin_back_to_fabric_types")
async def cortin_back_to_fabric_types(callback: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω
    data = await state.get_data()
    selected_letter = data.get('selected_letter', '')
    fabric_types = data.get('fabric_types', [])
    
    await state.set_state(CortinStates.choosing_fabric_type)
    
    if fabric_types:
        keyboard = create_cortin_fabric_types_keyboard(fabric_types)
        text = f"–°–∫–ª–∞–¥: Cortin\n\n–ë—É–∫–≤–∞: {selected_letter}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª–æ—Ç–Ω–∞:"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
        await cortin_back_to_letters(callback, state)
        return
    
    try:
        await callback.message.edit_text(text=text, reply_markup=keyboard)
    except:
        await callback.message.answer(text=text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "cortin_back_to_letters")
async def cortin_back_to_letters(callback: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
    await state.set_state(CortinStates.choosing_letter)
    try:
        await callback.message.edit_text(
            "–°–∫–ª–∞–¥: Cortin\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_cortin_letters_keyboard()
        )
    except:
        await callback.message.answer(
            "–°–∫–ª–∞–¥: Cortin\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_cortin_letters_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data == "cortin_new_search")
async def cortin_new_search(callback: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
    await state.set_state(CortinStates.choosing_letter)
    try:
        await callback.message.edit_text(
            "–°–∫–ª–∞–¥: Cortin\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_cortin_letters_keyboard()
        )
    except:
        await callback.message.answer(
            "–°–∫–ª–∞–¥: Cortin\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_cortin_letters_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data == "back_to_factories")
async def back_to_factories(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(MainStates.choosing_factory)
    try:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
            reply_markup=create_factory_keyboard()
        )
    except:
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
            reply_markup=create_factory_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data.startswith("inter_type_"))
async def process_inter_fabric_type_selection(callback: CallbackQuery, state: FSMContext):
    try:
        type_idx = int(callback.data.split("_")[2])
        fabric_types = inter_data.get_fabric_types()
        
        if type_idx >= len(fabric_types):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —à—Ç–æ—Ä—ã")
            return
            
        selected_type = fabric_types[type_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø —à—Ç–æ—Ä—ã Inter: {selected_type}")
        
        await state.update_data(fabric_type=selected_type)
        
        display_name = inter_data.get_display_name(selected_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤—ã–±–æ—Ä –ø–æ –±—É–∫–≤–∞–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        if selected_type in ["–¢–∫–∞–Ω–∏ –ø–ª–∏—Å—Å–µ", "–¢–∫–∞–Ω–∏ —Ä—É–ª–æ–Ω–Ω—ã–µ", "–¢–∫–∞–Ω–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 89 –º–º", "–¢–∫–∞–Ω–∏ –ö–æ–º–±–æ"]:
            # –î–ª—è –ø–ª–∏—Å—Å–µ –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±—É–∫–≤
            await state.set_state(InterStates.choosing_letter)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            fabric_groups = inter_data.get_fabric_groups(selected_type)
            fabric_names = list(fabric_groups.keys())
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã
            letters = get_inter_fabric_letters(fabric_names)
            
            await callback.message.edit_text(
                text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–æ—Ç–Ω–∞:",
                reply_markup=create_inter_letters_keyboard(letters)
            )
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
            await state.set_state(InterStates.choosing_fabric_name)
            
            await callback.message.edit_text(
                text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:",
                reply_markup=create_inter_fabric_categories_keyboard(selected_type)
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —à—Ç–æ—Ä—ã Inter: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inter_cat_ —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

@dp.callback_query(F.data.startswith("inter_fabric_"))
async def process_inter_fabric_name_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        fabric_type = data.get('fabric_type', '')
        
        if callback.data.startswith("inter_fabric_page_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page = int(callback.data.split("_")[3])
            await state.update_data(fabric_page=page)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
            filtered_fabrics = data.get('filtered_fabrics', [])
            if filtered_fabrics:
                keyboard = create_inter_fabric_by_letter_keyboard(filtered_fabrics, page)
            else:
                keyboard = create_inter_fabric_categories_keyboard(fabric_type, page)
            
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ—Ç–Ω–∞
        fabric_idx = int(callback.data.split("_")[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
        filtered_fabrics = data.get('filtered_fabrics', [])
        if filtered_fabrics:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞
            fabric_names = filtered_fabrics
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è —Ç–∏–ø–∞
            fabric_groups = inter_data.get_fabric_groups(fabric_type)
            fabric_names = list(fabric_groups.keys())
        
        if fabric_idx >= len(fabric_names):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ—Ç–Ω–∞")
            return
            
        selected_fabric = fabric_names[fabric_idx]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–æ—Ç–Ω–æ Inter: {selected_fabric}")
        
        await state.update_data(fabric_name=selected_fabric)
        await state.set_state(InterStates.choosing_color)
        
        display_type = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
        
        await callback.message.edit_text(
            text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n–ü–æ–ª–æ—Ç–Ω–æ: {selected_fabric}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=create_inter_colors_keyboard(fabric_type, "", selected_fabric)  # fabric_category –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–æ—Ç–Ω–∞ Inter: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("inter_color_"))
async def process_inter_color_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        fabric_type = data.get('fabric_type', '')
        fabric_name = data.get('fabric_name', '')
        
        if callback.data.startswith("inter_color_page_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page = int(callback.data.split("_")[3])
            await state.update_data(color_page=page)
            
            keyboard = create_inter_colors_keyboard(fabric_type, "", fabric_name, page)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        color_idx = int(callback.data.split("_")[2])
        colors_data = inter_data.get_fabric_colors(fabric_type, "", fabric_name)
        
        if color_idx >= len(colors_data):
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞")
            return
            
        selected_item = colors_data[color_idx]
        selected_color = inter_data.extract_color_from_name(selected_item.get('name', ''))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–≤–µ—Ç Inter: {selected_color}")
        
        await state.update_data(color=selected_color)
        await state.set_state(InterStates.final_selection)
        
        await callback.message.edit_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∫–∞–Ω–∏
        fabric_info = await inter_data.get_fabric_info(fabric_type, "", fabric_name, selected_color)
        
        if not fabric_info:
            await callback.message.edit_text(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∫–∞–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=create_inter_colors_keyboard(fabric_type, "", fabric_name)
            )
            await state.set_state(InterStates.choosing_color)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        display_type = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
        
        message_text = f"""–°–∫–ª–∞–¥: Inter

–ù–∞–∑–≤–∞–Ω–∏–µ: {fabric_info['name']}
–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}
üì¶ –ù–∞–ª–∏—á–∏–µ: {fabric_info['status']}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {fabric_info['availability_text']}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        image_url = fabric_info.get('image_url', '')
        if image_url:
            try:
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=image_url,
                    caption=message_text,
                    reply_markup=create_inter_final_keyboard(),
                    parse_mode="Markdown"
                )
            except Exception as photo_error:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    message_text + "\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=create_inter_final_keyboard(),
                    parse_mode="Markdown"
                )
        else:
            await callback.message.edit_text(
                message_text,
                reply_markup=create_inter_final_keyboard(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞ Inter: {e}")
        data = await state.get_data()
        fabric_type = data.get('fabric_type', '')
        fabric_name = data.get('fabric_name', '')
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ",
            reply_markup=create_inter_colors_keyboard(fabric_type, "", fabric_name)
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º –≤ Inter
@dp.callback_query(F.data.startswith("inter_letter_"))
async def process_inter_letter_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        fabric_type = data.get('fabric_type', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
        selected_letter = callback.data.split("_")[2]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –±—É–∫–≤—É Inter: {selected_letter}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        fabric_groups = inter_data.get_fabric_groups(fabric_type)
        fabric_names = list(fabric_groups.keys())
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–æ—Ç–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤–µ
        filtered_fabrics = filter_inter_fabrics_by_letter(fabric_names, selected_letter)
        
        if not filtered_fabrics:
            await callback.answer(f"–ù–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω –Ω–∞ –±—É–∫–≤—É {selected_letter}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞ –∏ –±—É–∫–≤—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            selected_letter=selected_letter,
            filtered_fabrics=filtered_fabrics
        )
        await state.set_state(InterStates.choosing_fabric_name)
        
        display_type = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
        
        await callback.message.edit_text(
            text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n–ë—É–∫–≤–∞: {selected_letter}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:",
            reply_markup=create_inter_fabric_by_letter_keyboard(filtered_fabrics)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—É–∫–≤—ã Inter: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è Inter
@dp.callback_query(F.data == "inter_back_to_letters")
async def inter_back_to_letters(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    fabric_type = data.get('fabric_type', '')
    await state.set_state(InterStates.choosing_letter)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–æ—Ç–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    fabric_groups = inter_data.get_fabric_groups(fabric_type)
    fabric_names = list(fabric_groups.keys())
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—É–∫–≤—ã
    letters = get_inter_fabric_letters(fabric_names)
    
    display_type = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
    
    try:
        await callback.message.edit_text(
            text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_inter_letters_keyboard(letters)
        )
    except:
        await callback.message.answer(
            text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–æ—Ç–Ω–∞:",
            reply_markup=create_inter_letters_keyboard(letters)
        )
    await callback.answer()

@dp.callback_query(F.data == "inter_back_to_types")
async def inter_back_to_types(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InterStates.choosing_fabric_type)
    try:
        await callback.message.edit_text(
            text="–°–∫–ª–∞–¥: Inter\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_inter_fabric_types_keyboard()
        )
    except:
        await callback.message.answer(
            text="–°–∫–ª–∞–¥: Inter\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —à—Ç–æ—Ä—ã:",
            reply_markup=create_inter_fabric_types_keyboard()
        )
    await callback.answer()

# –£–¥–∞–ª—è–µ–º inter_back_to_categories —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —à–∞–≥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

@dp.callback_query(F.data == "inter_back_to_fabrics")
async def inter_back_to_fabrics(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    fabric_type = data.get('fabric_type', '')
    await state.set_state(InterStates.choosing_fabric_name)
    
    display_type = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –≤—ã–±–æ—Ä –ø–æ –±—É–∫–≤–∞–º –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    if fabric_type in ["–¢–∫–∞–Ω–∏ –ø–ª–∏—Å—Å–µ", "–¢–∫–∞–Ω–∏ —Ä—É–ª–æ–Ω–Ω—ã–µ", "–¢–∫–∞–Ω–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 89 –º–º", "–¢–∫–∞–Ω–∏ –ö–æ–º–±–æ"]:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        filtered_fabrics = data.get('filtered_fabrics', [])
        selected_letter = data.get('selected_letter', '')
        
        if filtered_fabrics and selected_letter:
            try:
                await callback.message.edit_text(
                    text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n–ë—É–∫–≤–∞: {selected_letter}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:",
                    reply_markup=create_inter_fabric_by_letter_keyboard(filtered_fabrics)
                )
            except:
                await callback.message.answer(
                    text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n–ë—É–∫–≤–∞: {selected_letter}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:",
                    reply_markup=create_inter_fabric_by_letter_keyboard(filtered_fabrics)
                )
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤
            await inter_back_to_letters(callback, state)
            return
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
        try:
            await callback.message.edit_text(
                text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:",
                reply_markup=create_inter_fabric_categories_keyboard(fabric_type)
            )
        except:
            await callback.message.answer(
                text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ—Ç–Ω–æ:",
                reply_markup=create_inter_fabric_categories_keyboard(fabric_type)
            )
    await callback.answer()

@dp.callback_query(F.data == "inter_back_to_colors")
async def inter_back_to_colors(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    fabric_type = data.get('fabric_type', '')
    fabric_name = data.get('fabric_name', '')
    await state.set_state(InterStates.choosing_color)
    
    display_type = inter_data.get_display_name(fabric_type, inter_data.FABRIC_TYPE_DISPLAY_NAMES)
    
    try:
        await callback.message.edit_text(
            text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n–ü–æ–ª–æ—Ç–Ω–æ: {fabric_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=create_inter_colors_keyboard(fabric_type, "", fabric_name)
        )
    except:
        await callback.message.answer(
            text=f"–°–∫–ª–∞–¥: Inter\n\n–¢–∏–ø —à—Ç–æ—Ä—ã: {display_type}\n–ü–æ–ª–æ—Ç–Ω–æ: {fabric_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=create_inter_colors_keyboard(fabric_type, "", fabric_name)
        )
    await callback.answer()

if __name__ == "__main__":
    async def main():
        # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            print("Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        
        await dp.start_polling(bot)
    
    asyncio.run(main())