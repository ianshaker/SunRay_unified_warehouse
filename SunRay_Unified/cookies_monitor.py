#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ cookies –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import json
import time
import requests
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('cookies_monitor.log'),
        logging.StreamHandler()
    ]
)

class CookiesMonitor:
    def __init__(self):
        self.cookies_file = "cortin_data.py"
        self.test_url = "https://sale.cortin.ru/mfg/stocks/materials"
        self.backup_file = "cookies_backup.json"
        
    def load_current_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ cookies –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º cookies –∏–∑ Python —Ñ–∞–π–ª–∞
            import re
            phpsessid_match = re.search(r'"PHPSESSID":\s*"([^"]*)"', content)
            identity_match = re.search(r'"_identity":\s*"([^"]*)"', content)
            
            if phpsessid_match and identity_match:
                return {
                    'PHPSESSID': phpsessid_match.group(1),
                    '_identity': identity_match.group(1)
                }
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return None
    
    def test_cookies_validity(self, cookies):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å cookies"""
        try:
            response = requests.get(
                self.test_url,
                cookies=cookies,
                timeout=10,
                headers={
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                }
            )
            
            if response.status_code != 200:
                logging.warning(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
            
            text = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            has_data_material = 'data-material=' in text
            has_table = '<table' in text.lower()
            material_count = text.count('data-material=')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title_success = False
            title_start = text.find('<title>')
            title_end = text.find('</title>')
            if title_start != -1 and title_end != -1:
                title = text[title_start+7:title_end].lower()
                title_success = '–æ—Å—Ç–∞—Ç–∫–∏' in title or '–º–∞—Ç–µ—Ä–∏–∞–ª—ã' in title
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            has_login_form = 'type="password"' in text or 'action="/site/login"' in text
            has_auth_redirect = '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' in text.lower() and '–æ—Å—Ç–∞—Ç–∫–∏' not in text.lower()
            
            if has_login_form or has_auth_redirect:
                logging.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç")
                return False
            
            # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if has_data_material and has_table and title_success and material_count > 100:
                logging.info(f"‚úÖ Cookies –≤–∞–ª–∏–¥–Ω—ã - –Ω–∞–π–¥–µ–Ω–æ {material_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                return True
            else:
                logging.warning(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: materials={material_count}, table={has_table}, title={title_success}")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ cookies: {e}")
            return False
    
    def save_backup(self, cookies):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç backup cookies"""
        try:
            backup_data = {
                'cookies': cookies,
                'timestamp': datetime.now().isoformat(),
                'status': 'valid'
            }
            
            with open(self.backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
            logging.info("Backup cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è backup: {e}")
    
    def check_cookies_status(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ cookies"""
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É cookies...")
        
        cookies = self.load_current_cookies()
        if not cookies:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies")
            return False
        
        if not cookies['PHPSESSID'] or not cookies['_identity']:
            logging.warning("Cookies –ø—É—Å—Ç—ã–µ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return False
        
        is_valid = self.test_cookies_validity(cookies)
        
        if is_valid:
            logging.info("‚úÖ Cookies –≤–∞–ª–∏–¥–Ω—ã")
            self.save_backup(cookies)
            return True
        else:
            logging.warning("‚ùå Cookies —É—Å—Ç–∞—Ä–µ–ª–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return False
    
    def get_cookies_age(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç cookies –≤ –¥–Ω—è—Ö"""
        try:
            with open(self.backup_file, 'r', encoding='utf-8') as f:
                backup = json.load(f)
                
            timestamp = datetime.fromisoformat(backup['timestamp'])
            age = datetime.now() - timestamp
            return age.days
        except:
            return None

def main():
    monitor = CookiesMonitor()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ cookies...")
    is_valid = monitor.check_cookies_status()
    
    age = monitor.get_cookies_age()
    if age is not None:
        print(f"üìÖ –í–æ–∑—Ä–∞—Å—Ç cookies: {age} –¥–Ω–µ–π")
        
        if age > 7:
            print("‚ö†Ô∏è Cookies —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    
    if not is_valid:
        print("\nüîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies!")
        print("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python quick_update_cookies.py")
        print("   –∏–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ AUTHORIZATION_GUIDE.md")
    else:
        print("\n‚úÖ Cookies —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    main()