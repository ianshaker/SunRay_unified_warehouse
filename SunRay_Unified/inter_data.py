"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ Inter (Gamma)
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª–æ–≥–∏–∫–µ –∏–∑ SunRay_Gamma
"""
import json
import logging
import os
from typing import Dict, List, Optional, Any, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
script_dir = os.path.dirname(os.path.abspath(__file__))
CATALOG_FILE = os.path.join(script_dir, "catalog.json")

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —à—Ç–æ—Ä –¥–ª—è –∑–∞–≤–æ–¥–∞ Inter
ALLOWED_TYPES_INTER = [
    "–¢–∫–∞–Ω–∏ —Ä—É–ª–æ–Ω–Ω—ã–µ",
    "–õ–µ–Ω—Ç–∞ –∞–ª—é–º–∏–Ω–∏–µ–≤–∞—è", 
    "–ü–ª–∞—Å—Ç–∏–∫ 89 –º–º",
    "–ê–ª—é–º–∏–Ω–∏–π 89 –º–º",
    "–î–µ—Ä–µ–≤–æ",
    "–¢–∫–∞–Ω–∏ –ø–ª–∏—Å—Å–µ",
    "–¢–∫–∞–Ω–∏ –ö–æ–º–±–æ",
    "–¢–∫–∞–Ω–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 89 –º–º",
    "–¢–∫–∞–Ω–∏ —Ä–∏–º—Å–∫–∏–µ"
]

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π (–∏–∑ config.py SunRay_Gamma)
FABRIC_TYPE_DISPLAY_NAMES = {
    '—Ä—É–ª–æ–Ω–Ω—ã–µ —Ç–∫–∞–Ω–∏': '–¢–∫–∞–Ω–∏ —Ä—É–ª–æ–Ω–Ω—ã–µ',
    '–∫–æ–º–±–æ —Ç–∫–∞–Ω–∏': '–¢–∫–∞–Ω–∏ –ö–æ–º–±–æ',
    '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∫–∞–Ω–∏': '–¢–∫–∞–Ω–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ 89 –º–º',
    '—Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã': '–¢–∫–∞–Ω–∏ —Ä–∏–º—Å–∫–∏–µ',
    '–ª–µ–Ω—Ç–∞ –∞–ª—é–º–∏–Ω–∏–µ–≤–∞—è': '–õ–µ–Ω—Ç–∞ –∞–ª—é–º–∏–Ω–∏–µ–≤–∞—è',
    '–ø–ª–∞—Å—Ç–∏–∫ 89 –º–º': '–ü–ª–∞—Å—Ç–∏–∫ 89 –º–º',
    '–¥–µ—Ä–µ–≤–æ': '–î–µ—Ä–µ–≤–æ',
    '—Ç–∫–∞–Ω–∏ –ø–ª–∏—Å—Å–µ': '–¢–∫–∞–Ω–∏ –ø–ª–∏—Å—Å–µ'
}

CATEGORY_DISPLAY_NAMES = FABRIC_TYPE_DISPLAY_NAMES

FABRIC_CATEGORIES = {
    '–†—É–ª–æ–Ω–Ω—ã–µ —Ç–∫–∞–Ω–∏': {
        'emoji': 'üéûÔ∏è',
        'description': '–¢–∫–∞–Ω–∏ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö —à—Ç–æ—Ä'
    },
    '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∫–∞–Ω–∏': {
        'emoji': 'üìè',
        'description': '–¢–∫–∞–Ω–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–ª—é–∑–∏'
    },
    '–†–∏–º—Å–∫–∏–µ —Ç–∫–∞–Ω–∏': {
        'emoji': 'üèõÔ∏è',
        'description': '–¢–∫–∞–Ω–∏ –¥–ª—è —Ä–∏–º—Å–∫–∏—Ö —à—Ç–æ—Ä'
    },
    '–ö–æ–º–±–æ —Ç–∫–∞–Ω–∏': {
        'emoji': 'üîÑ',
        'description': '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∫–∞–Ω–∏'
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
_catalog_data = None
_category_map = {}  # {short_id: category_name}
_fabric_map = {}    # {short_id: (category_name, fabric_name)}
_item_map = {}      # {short_id: (category_name, fabric_name, item_index, item)}

def load_catalog() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global _catalog_data
    
    if _catalog_data is not None:
        return _catalog_data
    
    try:
        with open(CATALOG_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            if 'catalog' in data and 'metadata' in data:
                catalog = data['catalog']
                logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ Inter –∑–∞–≥—Ä—É–∂–µ–Ω –æ—Ç {data['metadata'].get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {data['metadata'].get('total_categories', 0)}, "
                          f"—Ç–æ–≤–∞—Ä–æ–≤: {data['metadata'].get('total_items', 0)}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if isinstance(catalog, dict):
                    categories_list = []
                    for main_category, subcategories in catalog.items():
                        for subcategory_name, items in subcategories.items():
                            category_data = {
                                'name': subcategory_name,
                                'section': '–î–∞',
                                'items': items,
                                'main_category': main_category
                            }
                            categories_list.append(category_data)
                    _catalog_data = categories_list
                    _create_mappings()
                    return categories_list
                else:
                    _catalog_data = catalog
                    _create_mappings()
                    return catalog
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                logger.warning("–ó–∞–≥—Ä—É–∂–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                _catalog_data = data
                _create_mappings()
                return data
                    
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ {CATALOG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return {}

def _create_mappings():
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–ª–æ—Ç–µ–Ω –∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    global _category_map, _fabric_map, _item_map
    
    _category_map.clear()
    _fabric_map.clear()
    _item_map.clear()
    
    catalog = _catalog_data
    if isinstance(catalog, list):
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        visible_cat_idx = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category in catalog:
            category_name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            section = category.get('section', '–ù–µ—Ç')
            items = category.get('items', [])
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å section='–î–∞' –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            # –ò —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ Inter
            if len(items) > 0 and section == '–î–∞' and category_name.strip() in ALLOWED_TYPES_INTER:
                cat_id = f"c{visible_cat_idx}"
                _category_map[cat_id] = category_name
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª–æ—Ç–Ω–∞
                fabric_groups = {}
                for item in items:
                    item_name = item.get('name', '')
                    if '`' in item_name:
                        fabric_part = item_name.split('`')[1]
                        if fabric_part.endswith('`'):
                            fabric_part = fabric_part[:-1]
                        words = fabric_part.split()
                        if len(words) >= 2:
                            fabric_name = words[0]
                        else:
                            fabric_name = fabric_part
                    else:
                        fabric_name = item_name
                    
                    if fabric_name not in fabric_groups:
                        fabric_groups[fabric_name] = []
                    fabric_groups[fabric_name].append(item)
                
                # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –ø–æ–ª–æ—Ç–µ–Ω
                for fab_idx, (fabric_name, fabric_items) in enumerate(fabric_groups.items()):
                    fab_id = f"f{visible_cat_idx}_{fab_idx}"
                    _fabric_map[fab_id] = (category_name, fabric_name)
                    
                    # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
                    for item_idx, item in enumerate(fabric_items):
                        item_id = f"i{visible_cat_idx}_{fab_idx}_{item_idx}"
                        _item_map[item_id] = (category_name, fabric_name, item_idx, item)
                
                visible_cat_idx += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

def get_fabric_types() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ç–∫–∞–Ω–µ–π (–æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)"""
    catalog = load_catalog()
    
    if isinstance(catalog, list):
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        visible_categories = []
        for category in catalog:
            category_name = category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            section = category.get('section', '–ù–µ—Ç')
            items = category.get('items', [])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å section='–î–∞' –∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            if len(items) > 0 and section == '–î–∞':
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º –¥–ª—è Inter
                if category_name.strip() in ALLOWED_TYPES_INTER:
                    visible_categories.append(category_name)
        
        return visible_categories
    else:
        # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–ª–æ–≤–∞—Ä—å
        all_categories = list(catalog.keys())
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º –¥–ª—è Inter
        filtered_categories = [cat for cat in all_categories if cat.strip() in ALLOWED_TYPES_INTER]
        return filtered_categories

def get_fabric_categories(fabric_type: str) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–∫–∞–Ω–∏"""
    # –í –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ fabric_type —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–æ—Ç–µ–Ω –∫–∞–∫ "–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    fabric_groups = get_fabric_groups(fabric_type)
    return list(fabric_groups.keys())

def get_fabric_groups(fabric_type: str) -> Dict[str, List[Dict]]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–∫–∞–Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø–æ–ª–æ—Ç–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    catalog = load_catalog()
    
    if isinstance(catalog, list):
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category = next((cat for cat in catalog if cat.get('name') == fabric_type), None)
        if category:
            items = category.get('items', [])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª–æ—Ç–Ω–∞
            fabric_groups = {}
            for item in items:
                item_name = item.get('name', '')
                if '`' in item_name:
                    fabric_part = item_name.split('`')[1]
                    if fabric_part.endswith('`'):
                        fabric_part = fabric_part[:-1]
                    words = fabric_part.split()
                    if len(words) >= 2:
                        fabric_name = words[0]
                    else:
                        fabric_name = fabric_part
                else:
                    fabric_name = item_name
                
                if fabric_name not in fabric_groups:
                    fabric_groups[fabric_name] = []
                fabric_groups[fabric_name].append(item)
            
            return fabric_groups
    
    return {}

def get_fabric_colors(fabric_type: str, fabric_category: str, fabric_name: str) -> List[Dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∫–∞–Ω–∏"""
    # –í –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ fabric_category –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, fabric_name —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
    fabric_groups = get_fabric_groups(fabric_type)
    return fabric_groups.get(fabric_name, [])

def extract_color_from_name(fabric_name: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–≤–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∫–∞–Ω–∏"""
    if '`' in fabric_name:
        fabric_part = fabric_name.split('`')[1]
        if fabric_part.endswith('`'):
            fabric_part = fabric_part[:-1]
        words = fabric_part.split()
        if len(words) >= 2:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–∫ —Ü–≤–µ—Ç
            return ' '.join(words[1:])
        else:
            return fabric_part
    return fabric_name

def get_availability_status(item: Dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è —Ç–∫–∞–Ω–∏"""
    availability_text = item.get('availability_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    if availability_text == "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
        return "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
    elif availability_text == "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
        return "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ"
    elif availability_text in ["–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏", "–í –Ω–∞–ª–∏—á–∏–∏"]:
        return "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏"
    else:
        return "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

async def get_fabric_info(fabric_type: str, fabric_category: str, fabric_name: str, color: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏"""
    try:
        colors_data = get_fabric_colors(fabric_type, fabric_category, fabric_name)
        
        # –ò—â–µ–º —Ç–∫–∞–Ω—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        for item in colors_data:
            item_color = extract_color_from_name(item.get('name', ''))
            if item_color.lower() == color.lower():
                return {
                    'name': item.get('name', ''),
                    'status': get_availability_status(item),
                    'availability_text': item.get('availability_text', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'),
                    'image_url': item.get('image', ''),
                    'fabric_type': fabric_type,
                    'id': item.get('id', '')
                }
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∫–∞–Ω–∏: {e}")
        return None

def get_display_name(key: str, display_dict: Dict[str, str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    return display_dict.get(key.lower(), key)

def get_category_emoji(fabric_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return FABRIC_CATEGORIES.get(fabric_type, {}).get('emoji', 'üìã')

def get_category_map() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    return _category_map.copy()

def get_fabric_map() -> Dict[str, Tuple[str, str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–æ—Ç–µ–Ω"""
    return _fabric_map.copy()

def get_item_map() -> Dict[str, Tuple[str, str, int, Dict]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    return _item_map.copy()
